{"ast":null,"code":"import { DestroyRef, inject } from '@angular/core';\nimport { HttpParams } from \"@angular/common/http\";\nimport { COTISATION_URL, MEMBER_URL, PARTICIPATION_URL, TONTINE_URL } from \"../../Conf/Http\";\nimport { Cotisation } from \"../../Models/Entitys/Cotisation\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { forkJoin, of, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nlet TontineServiceService = /*#__PURE__*/(() => {\n  class TontineServiceService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.destroyRef = inject(DestroyRef);\n      this.participentHasben = false;\n    }\n    LoadTontine() {\n      return this.http.get(TONTINE_URL + \"/\");\n    }\n    LoadMyTontine() {\n      let id = -1;\n      if (this.authService.appUser) id = this.authService.appUser.membre.id;\n      let params = new HttpParams().set(\"id\", id);\n      return this.http.post(TONTINE_URL + \"/my\", params);\n    }\n    MyTontine(id) {\n      let params = new HttpParams().set(\"id\", id);\n      return this.http.post(TONTINE_URL + \"/my\", params);\n    }\n    getMyEchecs(id) {\n      return this.http.get(PARTICIPATION_URL + \"/myEchecs/\" + id);\n    }\n    getMyRetards(id) {\n      return this.http.get(PARTICIPATION_URL + \"/myRetards/\" + id);\n    }\n    getTypes() {\n      return this.http.get(TONTINE_URL + \"/types\");\n    }\n    getCotisation(idTontine) {\n      return this.http.get(COTISATION_URL + \"/tontine/\" + idTontine);\n    }\n    getCotisationById(id) {\n      return this.http.get(COTISATION_URL + \"/\" + id);\n    }\n    getParticipation(idCot) {\n      return this.http.get(PARTICIPATION_URL + \"/\" + idCot);\n    }\n    getCotParticipation(idCot) {\n      return this.http.get(PARTICIPATION_URL + \"/AllParticipan\" + idCot);\n    }\n    getActualParticipation(idCot, cot) {\n      return this.http.post(PARTICIPATION_URL + \"/actual/participation/\" + idCot, cot);\n    }\n    getMyPartsByTontine(idTon, id) {\n      return this.http.get(PARTICIPATION_URL + \"/ton/\" + idTon + \"/my/\" + id);\n    }\n    getAllLastbenef(idCot) {\n      console.log(\"idCot\", idCot);\n      return this.http.get(COTISATION_URL + \"/beneficiaire/\" + idCot);\n    }\n    AllLastbenef(idTon) {\n      console.log(\"idTon\", idTon);\n      return this.http.get(COTISATION_URL + \"/tontine/beneficiaire/\" + idTon);\n    }\n    getLastCot(idTon) {\n      return this.http.get(COTISATION_URL + \"/last/\" + idTon);\n    }\n    getLastNormalCot(idTon) {\n      return this.http.get(COTISATION_URL + \"/lastNormal/\" + idTon);\n    }\n    getActualCotisation(id) {\n      console.log(COTISATION_URL + \"/actual/\" + id);\n      return this.http.get(COTISATION_URL + \"/actual/\" + id);\n    }\n    getTontineById(id) {\n      return this.http.get(TONTINE_URL + \"/\" + id);\n    }\n    getechecBeforeCot(idCot) {\n      return this.http.get(PARTICIPATION_URL + \"/echec/cot/\" + idCot);\n    }\n    saveParticipation(data) {\n      return this.http.post(PARTICIPATION_URL + \"/save\", data);\n    }\n    saveParticipationList(data) {\n      return this.http.post(PARTICIPATION_URL + \"/saveList\", data);\n    }\n    saveCotisation(data) {\n      return this.http.post(COTISATION_URL + \"/save/\" + data.tontine.id, data);\n    }\n    checkEchecsCot(idTon, idCot) {\n      return this.http.get(PARTICIPATION_URL + \"/echec/cot/\" + idTon + \"/\" + idCot);\n    }\n    loadMembre(idTon) {\n      return this.http.get(TONTINE_URL + \"/membres/\" + idTon);\n    }\n    saveEnrg(enr) {\n      return this.http.post(TONTINE_URL + \"/save/enrg\", enr);\n    }\n    save(ton) {\n      return this.http.post(TONTINE_URL + \"/save\", ton);\n    }\n    saveTontine(ton) {\n      return this.http.post(TONTINE_URL + \"/save\", ton);\n    }\n    getRangEnrg(idTon) {\n      return this.http.get(MEMBER_URL + \"/rang/enrg/\" + idTon);\n    }\n    getben(id) {\n      return this.http.get(COTISATION_URL + \"/ben/\" + id);\n    }\n    startCotisation(idTontine, gratuit, rang) {\n      let actualDate = new Date().getTime();\n      let newCot;\n      if (!rang) return this.getLastNormalCot(idTontine).pipe(takeUntilDestroyed(this.destroyRef), switchMap(data => {\n        let creatat = new Date(data.createdAt).getTime();\n        if (actualDate - creatat >= 86400000) {\n          newCot = new Cotisation(null, data.nom, data.rang + 1, 0, data.tauxEchec, 0, 0, data.tauxTontine, gratuit, data.tontine, null, new Date(), new Date(), 0);\n          if (newCot.rang == 1) {\n            newCot.nom = new Date().toLocaleString().slice(0, 10) + \" \" + newCot.nom;\n          } else {\n            newCot.nom = new Date().toLocaleString().slice(0, 10) + \" \" + newCot.nom.slice(10);\n          }\n        } else {\n          newCot = data;\n        }\n        let partCall = this.getActualParticipation(idTontine, newCot);\n        let checkCall = this.checkEchecsCot(idTontine, Number(data.id));\n        let benefCall = this.AllLastbenef(idTontine);\n        let cot = of(newCot);\n        if (newCot.rang != 1) return forkJoin([cot, partCall, checkCall, benefCall]).pipe(takeUntilDestroyed(this.destroyRef));else return forkJoin([cot, partCall]).pipe(takeUntilDestroyed(this.destroyRef));\n      }));else {\n        return this.getCotisationById(idTontine).pipe(takeUntilDestroyed(this.destroyRef), switchMap(data => {\n          newCot = data;\n          let partCall = this.getCotParticipation(idTontine);\n          let checkCall = this.checkEchecsCot(idTontine, Number(data.id));\n          let benefCall = this.AllLastbenef(idTontine);\n          let cot = of(newCot);\n          if (newCot.rang != 1) return forkJoin([cot, partCall, checkCall, benefCall]).pipe(takeUntilDestroyed(this.destroyRef));else return forkJoin([cot, partCall]).pipe(takeUntilDestroyed(this.destroyRef));\n        }));\n      }\n    }\n    static #_ = this.ɵfac = function TontineServiceService_Factory(t) {\n      return new (t || TontineServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TontineServiceService,\n      factory: TontineServiceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TontineServiceService;\n})();\nexport { TontineServiceService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}