{"ast":null,"code":"import _asyncToGenerator from \"/home/ked/backups/Angular/DanguiUi/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { AUTH_URL, CHANGE_PASS, CHANGE_USERNAME, MEMBER_URL, RESET } from \"../../Conf/Http\";\nimport jwtDecode from \"jwt-decode\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    emit() {\n      this.userSubject.next(this.appUser);\n    }\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.isAuth = false;\n      this.role = \"\";\n      this.user = \"\";\n      this.accessToken = \"\";\n      this.userSubject = new Subject();\n    }\n    ngOnInit() {\n      let json = localStorage.getItem(\"appUser\");\n      if (json != null) {\n        this.loadProfile(JSON.parse(json));\n        this.router.navigateByUrl(\"/members\");\n      }\n    }\n    Login(username, pass) {\n      let hd = {\n        headers: new HttpHeaders().set('content-type', 'application/x-www-form-urlencoded')\n      };\n      let params = new HttpParams().set(\"username\", username).set(\"password\", pass);\n      return this.http.post(AUTH_URL, params, hd);\n    }\n    logout() {\n      this.isAuth = false;\n      this.user = \"\";\n      this.role = \"\";\n      localStorage.removeItem(\"appUser\");\n    }\n    loadProfile(data) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let jwtToken = data[\"access-token\"];\n        _this.accessToken = jwtToken;\n        _this.isAuth = true;\n        let decodetJwt = jwtDecode(_this.accessToken);\n        _this.user = decodetJwt.sub;\n        _this.role = decodetJwt.scope;\n        console.log(\"user\", _this.user, \"role\", _this.role);\n        let params = new HttpParams().set(\"username\", _this.user);\n        _this.http.post(MEMBER_URL + \"/user\", params).subscribe(data => {\n          _this.appUser = data;\n        });\n      })();\n    }\n    changePass(username, pass) {\n      let hd = {\n        headers: new HttpHeaders().set('content-type', 'application/x-www-form-urlencoded')\n      };\n      let params = new HttpParams().set(\"username\", username).set(\"password\", pass);\n      return this.http.post(CHANGE_PASS, params, hd);\n    }\n    changeName(last, username) {\n      let hd = {\n        headers: new HttpHeaders().set('content-type', 'application/x-www-form-urlencoded')\n      };\n      let params = new HttpParams().set(\"last\", last).set(\"username\", username);\n      return this.http.post(CHANGE_USERNAME, params, hd);\n    }\n    reset(element) {\n      let hd = {\n        headers: new HttpHeaders().set('content-type', 'application/x-www-form-urlencoded')\n      };\n      let params = new HttpParams().set(\"username\", element.nom);\n      return this.http.post(RESET, params, hd);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}