{"ast":null,"code":"import { getNbParticipation } from \"./getNbParticipation\";\nexport class GetTotalTontine {\n  constructor() {}\n  getTotalTontineVente(allCotisation, allPart, allRetard, allEchecNonPaye, allEchecPaye) {\n    let total = 0;\n    let totalTauxVentes = 0;\n    let totalEchecPaid = 0;\n    let totalRetrad = 0;\n    let totalComplement = 0;\n    let totalBoisson = 0;\n    let totalGratuit = 0;\n    let totalEchecNonPaid = 0;\n    let totalSupplement = 0;\n    let tontine = allCotisation[0].beneficiaire?.enregistrement?.tontine;\n    let nbPart = 0;\n    let result = new Map();\n    for (let cot of allCotisation) {\n      console.log(\"STEPS: 1\");\n      nbPart = getNbParticipation(Number(cot.id), allPart);\n      totalTauxVentes += cot.tauxVente;\n      totalComplement += cot.complement;\n      totalBoisson += cot.tauxTontine;\n      if (cot.gratuit) totalGratuit += cot.tauxTontine * nbPart;\n      if (nbPart > tontine.nbSeances) totalSupplement += (nbPart - tontine.nbSeances) * cot.tauxTontine;\n      for (let retar of allRetard) {\n        console.log(\"STEPS: 1\");\n        if (retar[0] == cot.id) totalRetrad += retar[1] * cot.tauxEchec;\n      }\n      for (let echec of allEchecPaye) {\n        if (echec[0] == cot.id) totalEchecPaid += echec[1] * (cot.tauxEchec + cot.tauxTontine);\n      }\n      for (let echec of allEchecNonPaye) {\n        if (echec[0] == cot.id) totalEchecNonPaid += echec[1] * cot.tauxEchec;\n      }\n    }\n    total = totalTauxVentes + totalRetrad + totalEchecPaid + totalSupplement - (totalComplement + totalBoisson + totalGratuit);\n    result.set(\"total\", total);\n    result.set(\"ventes\", totalTauxVentes);\n    result.set(\"retard\", totalRetrad);\n    result.set(\"E.P\", totalEchecPaid);\n    result.set(\"E.N.P\", totalEchecNonPaid);\n    result.set(\"supl\", totalSupplement);\n    result.set(\"compl\", totalComplement);\n    result.set(\"gratuit\", totalGratuit);\n    result.set(\"boisson\", totalBoisson);\n    return result;\n  }\n  getTotalTontineSimple(allCotisation, allPart, allRetard, allEchecNonPaye, allEchecPaye) {\n    let total = 0;\n    let totalTaux = 0;\n    let totalEchecPaid = 0;\n    let totalRetrad = 0;\n    let totalComplement = 0;\n    let totalBoisson = 0;\n    let totalEchecNonPaid = 0;\n    let tontine = allCotisation[0].beneficiaire?.enregistrement?.tontine;\n    let nbPart = 0;\n    let result = new Map();\n    console.log(\"BEGIN\");\n    for (let cot of allCotisation) {\n      nbPart = getNbParticipation(Number(cot.id), allPart);\n      totalTaux += tontine.tauxTontine;\n      totalComplement += cot.complement;\n      totalBoisson += cot.tauxTontine;\n      console.log(\"STEPS: 1\");\n      for (let retar of allRetard) {\n        if (retar[0] == cot.id) totalRetrad += retar[1] * tontine.tauxEchec;\n      }\n      for (let echec of allEchecPaye) {\n        if (echec[0] == cot.id) totalEchecPaid += echec[1] * (tontine.tauxEchec + tontine.tauxTontine);\n      }\n      for (let echec of allEchecNonPaye) {\n        if (echec[0] == cot.id) totalEchecNonPaid += echec[1] * tontine.tauxEchec;\n      }\n    }\n    total = totalTaux + totalRetrad + totalEchecPaid - (totalComplement + totalBoisson);\n    result.set(\"total\", total);\n    result.set(\"taux\", totalTaux);\n    result.set(\"retard\", totalRetrad);\n    result.set(\"E.P\", totalEchecPaid);\n    result.set(\"E.N.P\", totalEchecNonPaid);\n    result.set(\"compl\", totalComplement);\n    result.set(\"boisson\", totalBoisson);\n    return result;\n  }\n}","map":{"version":3,"names":["getNbParticipation","GetTotalTontine","constructor","getTotalTontineVente","allCotisation","allPart","allRetard","allEchecNonPaye","allEchecPaye","total","totalTauxVentes","totalEchecPaid","totalRetrad","totalComplement","totalBoisson","totalGratuit","totalEchecNonPaid","totalSupplement","tontine","beneficiaire","enregistrement","nbPart","result","Map","cot","console","log","Number","id","tauxVente","complement","tauxTontine","gratuit","nbSeances","retar","tauxEchec","echec","set","getTotalTontineSimple","totalTaux"],"sources":["/home/ked/backups/Angular/DanguiUi/src/app/metier/getTotalTontine.ts"],"sourcesContent":["import {Cotisation} from \"../../Models/Entitys/Cotisation\";\nimport {getNbParticipation} from \"./getNbParticipation\";\nimport {TontinesOps} from \"../../Models/Abstracts/Interfaces/TontinesOps\";\nexport class GetTotalTontine{\n\n    constructor() {\n    }\n\n    public getTotalTontineVente(allCotisation:Cotisation[],\n                         allPart:number[][],\n                         allRetard:number[][],\n                         allEchecNonPaye:number[][],\n                         allEchecPaye:number[][]) {\n\n        let total=0;\n        let totalTauxVentes = 0;\n        let totalEchecPaid = 0;\n        let totalRetrad =0;\n        let totalComplement = 0;\n        let totalBoisson=0;\n        let totalGratuit=0;\n        let totalEchecNonPaid=0;\n        let totalSupplement=0;\n\n        let tontine = <TontinesOps>(allCotisation[0].beneficiaire?.enregistrement)?.tontine\n        let nbPart =0;\n\n        let result:Map<string,number> = new Map<string, number>();\n\n        for(let cot of allCotisation){\n\n            console.log(\"STEPS: 1\");\n\n            nbPart=getNbParticipation(Number(cot.id),allPart);\n\n            totalTauxVentes += cot.tauxVente;\n            totalComplement += cot.complement;\n            totalBoisson += cot.tauxTontine;\n            if(cot.gratuit)\n                totalGratuit += cot.tauxTontine*nbPart;\n            if(nbPart>tontine.nbSeances)\n                totalSupplement += (nbPart-tontine.nbSeances)*cot.tauxTontine;\n\n            for(let retar of allRetard ){\n                console.log(\"STEPS: 1\");\n\n                if(retar[0]==cot.id)\n                    totalRetrad += retar[1]*cot.tauxEchec;\n            }\n            for(let echec of allEchecPaye){\n                if(echec[0]==cot.id)\n                    totalEchecPaid += echec[1]*(cot.tauxEchec+cot.tauxTontine);\n            }\n            for(let echec of allEchecNonPaye ){\n                if(echec[0]==cot.id)\n                    totalEchecNonPaid += echec[1]*(cot.tauxEchec);\n            }\n\n        }\n\n        total=((totalTauxVentes + totalRetrad + totalEchecPaid + totalSupplement) - (totalComplement + totalBoisson + totalGratuit));\n\n        result.set(\"total\",total);\n        result.set(\"ventes\",totalTauxVentes);\n        result.set(\"retard\",totalRetrad);\n        result.set(\"E.P\",totalEchecPaid);\n        result.set(\"E.N.P\",totalEchecNonPaid);\n        result.set(\"supl\",totalSupplement);\n        result.set(\"compl\",totalComplement)\n        result.set(\"gratuit\",totalGratuit);\n        result.set(\"boisson\",totalBoisson);\n\n        return result;\n    }\n    public getTotalTontineSimple(allCotisation:Cotisation[],\n                                          allPart:number[][],\n                                          allRetard:number[][],\n                                          allEchecNonPaye:number[][],\n                                          allEchecPaye:number[][]) {\n\n\n\n        let total=0;\n        let totalTaux = 0;\n        let totalEchecPaid = 0;\n        let totalRetrad =0;\n        let totalComplement = 0;\n        let totalBoisson=0;\n        let totalEchecNonPaid=0;\n\n        let tontine = <TontinesOps>(allCotisation[0].beneficiaire?.enregistrement)?.tontine\n        let nbPart =0;\n\n        let result:Map<string,number> = new Map<string, number>();\n\n        console.log(\"BEGIN\");\n\n        for(let cot of allCotisation){\n\n            nbPart=getNbParticipation(Number(cot.id),allPart);\n\n            totalTaux += tontine.tauxTontine;\n            totalComplement += cot.complement;\n            totalBoisson += cot.tauxTontine;\n\n            console.log(\"STEPS: 1\");\n\n            for(let retar of allRetard ){\n                if(retar[0]==cot.id)\n                    totalRetrad += retar[1]*tontine.tauxEchec;\n            }\n            for(let echec of allEchecPaye){\n                if(echec[0]==cot.id)\n                    totalEchecPaid += echec[1]*(tontine.tauxEchec+tontine.tauxTontine);\n            }\n            for(let echec of allEchecNonPaye ){\n                if(echec[0]==cot.id)\n                    totalEchecNonPaid += echec[1]*(tontine.tauxEchec);\n            }\n\n        }\n\n        total=((totalTaux + totalRetrad + totalEchecPaid) - (totalComplement + totalBoisson));\n\n        result.set(\"total\",total);\n        result.set(\"taux\",totalTaux);\n        result.set(\"retard\",totalRetrad);\n        result.set(\"E.P\",totalEchecPaid);\n        result.set(\"E.N.P\",totalEchecNonPaid);\n        result.set(\"compl\",totalComplement)\n        result.set(\"boisson\",totalBoisson);\n\n        return result;\n\n    }\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}