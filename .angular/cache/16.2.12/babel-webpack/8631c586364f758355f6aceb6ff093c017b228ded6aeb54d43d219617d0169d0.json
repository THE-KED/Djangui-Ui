{"ast":null,"code":"import _asyncToGenerator from \"/home/ked/backups/Angular/DanguiUi/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { AUTH_URL, CHANGE_PASS, CHANGE_USERNAME, MEMBER_URL, RESET } from \"../../Conf/Http\";\nimport jwtDecode from \"jwt-decode\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  emit() {\n    this.userSubject.next(this.appUser);\n  }\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isAuth = false;\n    this.role = \"\";\n    this.user = \"\";\n    this.accessToken = \"\";\n    this.userSubject = new Subject();\n  }\n  ngOnInit() {\n    let json = localStorage.getItem(\"appUser\");\n    if (json != null) {\n      this.loadProfile(JSON.parse(json));\n      this.router.navigateByUrl(\"/members\");\n    }\n  }\n  Login(username, pass) {\n    let hd = {\n      headers: new HttpHeaders().set('content-type', 'application/x-www-form-urlencoded')\n    };\n    let params = new HttpParams().set(\"username\", username).set(\"password\", pass);\n    return this.http.post(AUTH_URL, params, hd);\n  }\n  logout() {\n    this.isAuth = false;\n    this.user = \"\";\n    this.role = \"\";\n    localStorage.removeItem(\"appUser\");\n  }\n  loadProfile(data) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let jwtToken = data[\"access-token\"];\n      _this.accessToken = jwtToken;\n      _this.isAuth = true;\n      let decodetJwt = jwtDecode(_this.accessToken);\n      _this.user = decodetJwt.sub;\n      _this.role = decodetJwt.scope;\n      console.log(\"user\", _this.user, \"role\", _this.role);\n      let params = new HttpParams().set(\"username\", _this.user);\n      _this.http.post(MEMBER_URL + \"/user\", params).subscribe(data => {\n        _this.appUser = data;\n      });\n    })();\n  }\n  changePass(username, pass) {\n    let hd = {\n      headers: new HttpHeaders().set('content-type', 'application/x-www-form-urlencoded')\n    };\n    let params = new HttpParams().set(\"username\", username).set(\"password\", pass);\n    return this.http.post(CHANGE_PASS, params, hd);\n  }\n  changeName(last, username) {\n    let hd = {\n      headers: new HttpHeaders().set('content-type', 'application/x-www-form-urlencoded')\n    };\n    let params = new HttpParams().set(\"last\", last).set(\"username\", username);\n    return this.http.post(CHANGE_USERNAME, params, hd);\n  }\n  reset(element) {\n    let hd = {\n      headers: new HttpHeaders().set('content-type', 'application/x-www-form-urlencoded')\n    };\n    let params = new HttpParams().set(\"username\", element.nom);\n    return this.http.post(RESET, params, hd);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","HttpParams","AUTH_URL","CHANGE_PASS","CHANGE_USERNAME","MEMBER_URL","RESET","jwtDecode","Subject","AuthService","emit","userSubject","next","appUser","constructor","http","router","isAuth","role","user","accessToken","ngOnInit","json","localStorage","getItem","loadProfile","JSON","parse","navigateByUrl","Login","username","pass","hd","headers","set","params","post","logout","removeItem","data","_this","_asyncToGenerator","jwtToken","decodetJwt","sub","scope","console","log","subscribe","changePass","changeName","last","reset","element","nom","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["/home/ked/backups/Angular/DanguiUi/src/app/Services/auth.service.ts"],"sourcesContent":["import {Injectable, OnInit} from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {AUTH_URL, CHANGE_PASS, CHANGE_USERNAME, MEMBER_URL, RESET} from \"../../Conf/Http\";\nimport jwtDecode from \"jwt-decode\";\nimport {User} from \"../../Models/Entitys/User\";\nimport {Router} from \"@angular/router\";\nimport {Membre} from \"../../Models/Entitys/Membre\";\nimport {Subject} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements OnInit{\n\n\n  isAuth:boolean =false;\n  role:string=\"\";\n  user:string=\"\";\n  accessToken:string=\"\";\n  appUser:User|undefined;\n  userSubject= new Subject<User>();\n\n  public emit(){\n    this.userSubject.next(<User>this.appUser);\n  }\n\n  constructor(private http:HttpClient,private router:Router) {\n  }\n\n  ngOnInit() {\n    let json = localStorage.getItem(\"appUser\");\n    if(json!=null){\n      this.loadProfile(JSON.parse(json));\n      this.router.navigateByUrl(\"/members\");\n    }\n  }\n\n  public Login(username:string, pass:string){\n    let hd = {\n      headers: new HttpHeaders().set('content-type','application/x-www-form-urlencoded')\n    };\n    let params = new HttpParams()\n      .set(\"username\",username).set(\"password\",pass);\n\n    return this.http.post(AUTH_URL,params,hd);\n  }\n\n  public logout(){\n    this.isAuth = false;\n    this.user = \"\";\n    this.role = \"\";\n    localStorage.removeItem(\"appUser\");\n  }\n\n   public async loadProfile(data: any){\n\n    let jwtToken = data[\"access-token\"];\n    this.accessToken=jwtToken;\n    this.isAuth=true;\n    let decodetJwt:any=jwtDecode(this.accessToken);\n    this.user=decodetJwt.sub;\n    this.role=decodetJwt.scope;\n    console.log(\"user\",this.user,\"role\",this.role);\n\n    let params = new HttpParams().set(\"username\",this.user);\n\n    this.http.post<User>(MEMBER_URL+\"/user\",params).subscribe(data=>{\n      this.appUser = data;\n    });\n\n  }\n\n  public changePass(username:string,pass:string){\n\n    let hd = {\n      headers: new HttpHeaders().set('content-type','application/x-www-form-urlencoded')\n    };\n    let params = new HttpParams()\n      .set(\"username\",username).set(\"password\",pass);\n\n    return this.http.post(CHANGE_PASS,params,hd);\n\n  }\n  public changeName(last:string,username:string){\n\n    let hd = {\n      headers: new HttpHeaders().set('content-type','application/x-www-form-urlencoded')\n    };\n    let params = new HttpParams()\n      .set(\"last\",last).set(\"username\",username);\n\n    return this.http.post(CHANGE_USERNAME,params,hd);\n\n  }\n\n  public reset(element: Membre) {\n\n\n    let hd = {\n      headers: new HttpHeaders().set('content-type','application/x-www-form-urlencoded')\n    };\n    let params = new HttpParams()\n      .set(\"username\",element.nom);\n\n    return this.http.post(RESET,params,hd);\n\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}