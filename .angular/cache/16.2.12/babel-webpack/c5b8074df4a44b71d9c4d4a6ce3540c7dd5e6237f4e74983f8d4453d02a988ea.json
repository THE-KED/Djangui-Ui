{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/CacheResolverService\";\nconst TIME_TO_LIVE = 100;\nlet HttpCachingInterceptorInterceptor = /*#__PURE__*/(() => {\n  class HttpCachingInterceptorInterceptor {\n    constructor(cache) {\n      this.cache = cache;\n    }\n    intercept(request, next) {\n      console.log(\"request\", request);\n      if (request.method != 'GET' || request.url.includes(\"/auth/login\")) {\n        return next.handle(request);\n      }\n      const cachedResponse = this.cache.get(request.url);\n      return cachedResponse ? of(cachedResponse) : this.sendRequest(request, next);\n    }\n    sendRequest(request, next) {\n      let ttl = this.cache.map(request.url);\n      return next.handle(request).pipe(tap(event => {\n        if (event instanceof HttpResponse) {\n          this.cache.set(request.urlWithParams, event, ttl);\n        }\n      }));\n    }\n    static #_ = this.ɵfac = function HttpCachingInterceptorInterceptor_Factory(t) {\n      return new (t || HttpCachingInterceptorInterceptor)(i0.ɵɵinject(i1.CacheResolverService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpCachingInterceptorInterceptor,\n      factory: HttpCachingInterceptorInterceptor.ɵfac\n    });\n  }\n  return HttpCachingInterceptorInterceptor;\n})();\nexport { HttpCachingInterceptorInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}